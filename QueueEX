
class Node:
    def __init__(self, name, phone):
        self.name = name
        self.phone = phone
        self.__next = None

    def set_next(self, node):
        if isinstance(node, Node) or node is None:
            self.__next = node
        else:
            raise TypeError("The next node must be of the same type or none")

    def get_next(self, node):
        return self.__next

    def print_details(self):
        print "{} ({})".format(self.name, self.phone)


class LinkedList():
    def __init__(self):
        self.__root = None

    def get_root(self):
        return self.__root

    def add_start_to_list(self, node):
        if self.__root:
            node.set_next(self.__root)
        self.__root = node

    def remove_end_from_list(self, node):
        marker = root
        while marker:
            pass

    def find(self, name):
        marker = self.__root
        while marker:
            if marker.name == name:
                return marker
        marker = marker.get_next()
        raise LookupError("Name {} was not found".format(name))


class LinkedQueue:
    def __init__(self):
        self.__linked_list = LinkedList()

    def push(self, node):
        self.__linked_list.add_start_to_list(node)
        raise NotImplementedError()

    def pop(self, node):
        self.__linked_list.remove_end_from_list(node)
        raise NotImplementedError()
